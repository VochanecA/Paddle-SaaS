'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import { createClient } from '@/lib/supabase/client';
import type { User } from '@supabase/supabase-js';

interface CropRecommendation {
  name: string;
  variety: string;
  plantingSeason: string;
  daysToHarvest: number;
  spacing: string;
  waterRequirements: string;
  sunlight: string;
  difficulty: 'easy' | 'medium' | 'hard';
  yieldEstimate: string;
  companionPlants: string[];
  pestsToWatch: string[];
}

interface CropPlan {
  recommendations: CropRecommendation[];
  plantingSchedule: Array<{
    crop: string;
    plantingDate: string;
    harvestDate: string;
    notes: string;
  }>;
  soilPreparation: string[];
  wateringSchedule: string;
  estimatedYield: string;
  successTips: string[];
}

export default function CropPlanningPage() {
  const [formData, setFormData] = useState({
    location: '',
    gardenSize: '',
    soilType: 'loam',
    sunlightHours: '6-8',
    experienceLevel: 'beginner',
    preferredCrops: '',
    season: new Date().getMonth() < 6 ? 'spring' : 'fall'
  });
  const [isLoading, setIsLoading] = useState(false);
  const [plan, setPlan] = useState<CropPlan | null>(null);
  const [error, setError] = useState('');
  const router = useRouter();

  const extractJSONFromResponse = (content: string): CropPlan | null => {
    try {
      // Try to parse the entire content as JSON first
      return JSON.parse(content);
    } catch {
      // If that fails, try to extract JSON from code blocks or other patterns
      const jsonMatch = content.match(/```(?:json)?\s*([\s\S]*?)\s*```/) || content.match(/{[\s\S]*}/);
      if (jsonMatch) {
        try {
          return JSON.parse(jsonMatch[1] || jsonMatch[0]);
        } catch {
          return null;
        }
      }
      return null;
    }
  };

  const createFallbackResult = (content: string): CropPlan => {
    return {
      recommendations: [{
        name: 'Mixed Vegetables',
        variety: 'Seasonal Selection',
        plantingSeason: 'Current season',
        daysToHarvest: 60,
        spacing: 'Varies by crop',
        waterRequirements: 'Regular watering needed',
        sunlight: '6-8 hours daily',
        difficulty: 'medium',
        yieldEstimate: 'Good harvest expected',
        companionPlants: ['Marigolds', 'Basil'],
        pestsToWatch: ['Aphids', 'Slugs']
      }],
      plantingSchedule: [{
        crop: 'Various crops',
        plantingDate: 'Soon',
        harvestDate: 'In 2-3 months',
        notes: 'Based on your garden conditions'
      }],
      soilPreparation: ['Add compost', 'Test pH levels'],
      wateringSchedule: 'Water deeply 2-3 times per week',
      estimatedYield: 'Good production expected',
      successTips: ['Start with easy crops', 'Monitor soil moisture', 'Use organic fertilizers']
    };
  };

  const generateCropPlan = async () => {
    setIsLoading(true);
    setError('');
    setPlan(null);
    
    try {
      const response = await fetch('/api/ai/chat', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          messages: [
            {
              role: 'system',
              content: 'You are an agricultural expert. Provide crop planning advice in exact JSON format: {recommendations: Array<{name: string, variety: string, plantingSeason: string, daysToHarvest: number, spacing: string, waterRequirements: string, sunlight: string, difficulty: "easy"|"medium"|"hard", yieldEstimate: string, companionPlants: string[], pestsToWatch: string[]}>, plantingSchedule: Array<{crop: string, plantingDate: string, harvestDate: string, notes: string}>, soilPreparation: string[], wateringSchedule: string, estimatedYield: string, successTips: string[]}. Only return valid JSON.'
            },
            {
              role: 'user',
              content: `Create a crop plan for: Location: ${formData.location}, Garden Size: ${formData.gardenSize}, Soil Type: ${formData.soilType}, Sunlight: ${formData.sunlightHours} hours, Experience: ${formData.experienceLevel}, Season: ${formData.season}, Preferred Crops: ${formData.preferredCrops || 'any'}. Provide specific recommendations.`
            }
          ],
          model: 'deepseek/deepseek-chat-v3.1:free',
          temperature: 0.2,
          maxTokens: 2000
        }),
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`);
      }

      const data = await response.json();
      
      if (!data.content) {
        throw new Error('No content in AI response');
      }

      const parsedPlan = extractJSONFromResponse(data.content);
      
      if (parsedPlan) {
        if (parsedPlan.recommendations && Array.isArray(parsedPlan.recommendations)) {
          setPlan(parsedPlan);
        } else {
          setPlan(createFallbackResult(data.content));
        }
      } else {
        setPlan(createFallbackResult(data.content));
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to generate crop plan');
    } finally {
      setIsLoading(false);
    }
  };

  const handleInputChange = (field: string, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty) {
      case 'easy': return 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-300';
      case 'medium': return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-300';
      case 'hard': return 'bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-300';
      default: return 'bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-300';
    }
  };

  return (
    <div className="min-h-screen bg-white dark:bg-gray-950 transition-all duration-700">
      <main className="max-w-6xl mx-auto py-8 px-4 sm:px-6 lg:px-8">
        {/* Header */}
        <div className="text-center mb-8">
          <div className="inline-flex items-center px-4 py-2 rounded-full bg-green-100 dark:bg-green-900/50 border border-green-200 dark:border-green-800/50 mb-6">
            <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse mr-2" />
            <span className="text-sm font-medium text-green-800 dark:text-green-200">
              AI Crop Planning Assistant
            </span>
          </div>
          <h1 className="text-3xl font-bold text-gray-900 dark:text-white mb-4">
            Smart Crop Planning for Your Garden
          </h1>
          <p className="text-gray-600 dark:text-gray-400">
            Get personalized crop recommendations based on your garden conditions and preferences
          </p>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* Input Form */}
          <div className="space-y-6">
            <div className="bg-white dark:bg-gray-900 rounded-2xl border border-gray-200 dark:border-gray-700 p-6">
              <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">
                Garden Information
              </h3>
              
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Location (Zone/Region)
                  </label>
                  <input
                    type="text"
                    value={formData.location}
                    onChange={(e) => handleInputChange('location', e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500 dark:bg-gray-800 dark:text-white"
                    placeholder="e.g., Zone 5, Northeast US"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Garden Size
                  </label>
                  <input
                    type="text"
                    value={formData.gardenSize}
                    onChange={(e) => handleInputChange('gardenSize', e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500 dark:bg-gray-800 dark:text-white"
                    placeholder="e.g., 100 sq ft, 4x8 raised bed"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Soil Type
                  </label>
                  <select
                    value={formData.soilType}
                    onChange={(e) => handleInputChange('soilType', e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500 dark:bg-gray-800 dark:text-white"
                  >
                    <option value="clay">Clay</option>
                    <option value="loam">Loam</option>
                    <option value="sandy">Sandy</option>
                    <option value="silt">Silt</option>
                    <option value="chalky">Chalky</option>
                    <option value="peat">Peat</option>
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Daily Sunlight Hours
                  </label>
                  <select
                    value={formData.sunlightHours}
                    onChange={(e) => handleInputChange('sunlightHours', e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500 dark:bg-gray-800 dark:text-white"
                  >
                    <option value="2-4">2-4 hours (Partial Shade)</option>
                    <option value="4-6">4-6 hours (Partial Sun)</option>
                    <option value="6-8">6-8 hours (Full Sun)</option>
                    <option value="8+">8+ hours (Full Sun+)</option>
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Gardening Experience
                  </label>
                  <select
                    value={formData.experienceLevel}
                    onChange={(e) => handleInputChange('experienceLevel', e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500 dark:bg-gray-800 dark:text-white"
                  >
                    <option value="beginner">Beginner</option>
                    <option value="intermediate">Intermediate</option>
                    <option value="advanced">Advanced</option>
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Season
                  </label>
                  <select
                    value={formData.season}
                    onChange={(e) => handleInputChange('season', e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500 dark:bg-gray-800 dark:text-white"
                  >
                    <option value="spring">Spring</option>
                    <option value="summer">Summer</option>
                    <option value="fall">Fall</option>
                    <option value="winter">Winter (Indoor/Greenhouse)</option>
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Preferred Crops (Optional)
                  </label>
                  <input
                    type="text"
                    value={formData.preferredCrops}
                    onChange={(e) => handleInputChange('preferredCrops', e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500 dark:bg-gray-800 dark:text-white"
                    placeholder="e.g., tomatoes, lettuce, carrots"
                  />
                </div>

                <button
                  onClick={generateCropPlan}
                  disabled={isLoading || !formData.location || !formData.gardenSize}
                  className="w-full bg-green-600 hover:bg-green-700 disabled:bg-green-400 text-white font-medium py-3 px-4 rounded-md transition-colors"
                >
                  {isLoading ? 'Generating Plan...' : 'Generate Crop Plan'}
                </button>
              </div>
            </div>

            {/* Error Display */}
            {error && (
              <div className="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-md p-4">
                <p className="text-red-800 dark:text-red-200">{error}</p>
              </div>
            )}
          </div>

          {/* Results Section */}
          <div className="space-y-6">
            {plan ? (
              <>
                {/* Recommendations */}
                <div className="bg-white dark:bg-gray-900 rounded-2xl border border-gray-200 dark:border-gray-700 p-6">
                  <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">
                    Recommended Crops
                  </h3>
                  <div className="space-y-4">
                    {plan.recommendations.map((crop, index) => (
                      <div key={index} className="p-4 rounded-lg border border-gray-200 dark:border-gray-600">
                        <div className="flex items-start justify-between mb-2">
                          <h4 className="font-semibold text-gray-900 dark:text-white">{crop.name} ({crop.variety})</h4>
                          <span className={`px-2 py-1 rounded-full text-xs font-medium ${getDifficultyColor(crop.difficulty)}`}>
                            {crop.difficulty.toUpperCase()}
                          </span>
                        </div>
                        <div className="grid grid-cols-2 gap-2 text-sm mb-2">
                          <span className="text-gray-600 dark:text-gray-400">Season: {crop.plantingSeason}</span>
                          <span className="text-gray-600 dark:text-gray-400">Harvest: {crop.daysToHarvest} days</span>
                          <span className="text-gray-600 dark:text-gray-400">Sun: {crop.sunlight}</span>
                          <span className="text-gray-600 dark:text-gray-400">Water: {crop.waterRequirements}</span>
                        </div>
                        <p className="text-sm text-green-600 dark:text-green-400 mb-2">
                          Yield: {crop.yieldEstimate}
                        </p>
                        {crop.companionPlants.length > 0 && (
                          <p className="text-xs text-gray-500 dark:text-gray-400">
                            Companions: {crop.companionPlants.join(', ')}
                          </p>
                        )}
                      </div>
                    ))}
                  </div>
                </div>

                {/* Planting Schedule */}
                {plan.plantingSchedule && plan.plantingSchedule.length > 0 && (
                  <div className="bg-white dark:bg-gray-900 rounded-2xl border border-gray-200 dark:border-gray-700 p-6">
                    <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">
                      Planting Schedule
                    </h3>
                    <div className="space-y-3">
                      {plan.plantingSchedule.map((schedule, index) => (
                        <div key={index} className="flex justify-between items-start p-3 rounded-lg bg-gray-50 dark:bg-gray-800">
                          <div>
                            <span className="font-medium text-gray-900 dark:text-white">{schedule.crop}</span>
                            <p className="text-sm text-gray-600 dark:text-gray-400">
                              Plant: {schedule.plantingDate} → Harvest: {schedule.harvestDate}
                            </p>
                            {schedule.notes && (
                              <p className="text-xs text-green-600 dark:text-green-400 mt-1">{schedule.notes}</p>
                            )}
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                )}

                {/* Tips & Preparation */}
                <div className="bg-white dark:bg-gray-900 rounded-2xl border border-gray-200 dark:border-gray-700 p-6">
                  <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">
                    Garden Preparation & Tips
                  </h3>
                  <div className="space-y-3">
                    <div>
                      <h4 className="font-medium text-gray-900 dark:text-white mb-2">Soil Preparation</h4>
                      <ul className="list-disc list-inside text-sm text-gray-600 dark:text-gray-400 space-y-1">
                        {plan.soilPreparation.map((tip, index) => (
                          <li key={index}>{tip}</li>
                        ))}
                      </ul>
                    </div>
                    <div>
                      <h4 className="font-medium text-gray-900 dark:text-white mb-2">Watering Schedule</h4>
                      <p className="text-sm text-gray-600 dark:text-gray-400">{plan.wateringSchedule}</p>
                    </div>
                    <div>
                      <h4 className="font-medium text-gray-900 dark:text-white mb-2">Success Tips</h4>
                      <ul className="list-disc list-inside text-sm text-green-600 dark:text-green-400 space-y-1">
                        {plan.successTips.map((tip, index) => (
                          <li key={index}>{tip}</li>
                        ))}
                      </ul>
                    </div>
                  </div>
                </div>
              </>
            ) : (
              /* Placeholder */
              <div className="bg-gray-50 dark:bg-gray-900/50 rounded-2xl border border-gray-200 dark:border-gray-700 p-8 text-center">
                <div className="text-gray-400 dark:text-gray-500 mb-4">
                  <svg className="w-16 h-16 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                  </svg>
                </div>
                <h3 className="text-lg font-medium text-gray-700 dark:text-gray-300 mb-2">
                  Your Personalized Crop Plan
                </h3>
                <p className="text-gray-500 dark:text-gray-400 text-sm">
                  Fill in your garden details and generate a custom planting plan tailored to your conditions
                </p>
              </div>
            )}
          </div>
        </div>
      </main>
    </div>
  );
}