'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import { createClient } from '@/lib/supabase/client';
import type { User } from '@supabase/supabase-js';

interface CodeIssue {
  severity: 'high' | 'medium' | 'low';
  message: string;
  line?: number;
  suggestion?: string;
}

interface CodeReviewResult {
  issues: CodeIssue[];
  score: number;
  summary: string;
  language: string;
}

export default function CodeReviewPage() {
  const [code, setCode] = useState('');
  const [language, setLanguage] = useState('javascript');
  const [isLoading, setIsLoading] = useState(false);
  const [result, setResult] = useState<CodeReviewResult | null>(null);
  const [error, setError] = useState('');
  const router = useRouter();

  const extractJSONFromResponse = (content: string): CodeReviewResult | null => {
    try {
      // Try to parse the entire content as JSON first
      return JSON.parse(content);
    } catch {
      // If that fails, try to extract JSON from code blocks or other patterns
      const jsonMatch = content.match(/```(?:json)?\s*([\s\S]*?)\s*```/) || content.match(/{[\s\S]*}/);
      if (jsonMatch) {
        try {
          return JSON.parse(jsonMatch[1] || jsonMatch[0]);
        } catch {
          return null;
        }
      }
      return null;
    }
  };

  const createFallbackResult = (content: string): CodeReviewResult => {
    return {
      issues: [{
        severity: 'medium',
        message: 'AI provided analysis in free text format. Please check the summary for details.',
        suggestion: 'The AI response was not in the expected JSON format but contained valuable insights.'
      }],
      score: 75,
      summary: content.substring(0, 500), // Truncate if too long
      language
    };
  };

  const analyzeCode = async () => {
    setIsLoading(true);
    setError('');
    setResult(null);
    
    try {
      const response = await fetch('/api/ai/chat', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          messages: [
            {
              role: 'system',
              content: 'You are a code review assistant. Always respond with valid JSON in this exact format: {issues: Array<{severity: "high"|"medium"|"low", message: string, line?: number, suggestion?: string}>, score: number, summary: string, language: string}. Do not include any other text outside the JSON.'
            },
            {
              role: 'user',
              content: `Analyze this ${language} code for issues, security vulnerabilities, and best practices. Provide analysis in the specified JSON format.\n\nCode:\n${code}`
            }
          ],
          model: 'deepseek/deepseek-chat-v3.1:free',
          temperature: 0.1,
          maxTokens: 2000
        }),
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`);
      }

      const data = await response.json();
      
      if (!data.content) {
        throw new Error('No content in AI response');
      }

      // Try to extract JSON from the response
      const parsedResult = extractJSONFromResponse(data.content);
      
      if (parsedResult) {
        // Validate the parsed result has required fields
        if (parsedResult.issues && Array.isArray(parsedResult.issues) && typeof parsedResult.score === 'number') {
          setResult(parsedResult);
        } else {
          setResult(createFallbackResult(data.content));
        }
      } else {
        // Use fallback if JSON parsing fails
        setResult(createFallbackResult(data.content));
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : 'An error occurred during code analysis');
    } finally {
      setIsLoading(false);
    }
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'high': return 'bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-300';
      case 'medium': return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-300';
      case 'low': return 'bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-300';
      default: return 'bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-300';
    }
  };

  const getScoreColor = (score: number) => {
    if (score >= 80) return 'text-green-600 dark:text-green-400';
    if (score >= 60) return 'text-yellow-600 dark:text-yellow-400';
    return 'text-red-600 dark:text-red-400';
  };

  return (
    <div className="min-h-screen bg-white dark:bg-gray-950 transition-all duration-700">
      <main className="max-w-6xl mx-auto py-8 px-4 sm:px-6 lg:px-8">
        {/* Header */}
        <div className="text-center mb-8">
          <h1 className="text-3xl font-bold text-gray-900 dark:text-white mb-4">
            AI Code Review Assistant
          </h1>
          <p className="text-gray-600 dark:text-gray-400">
            Get instant feedback on your code for security, performance, and best practices
          </p>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* Input Section */}
          <div className="space-y-6">
            <div className="bg-white dark:bg-gray-900 rounded-2xl border border-gray-200 dark:border-gray-700 p-6">
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Programming Language
                  </label>
                  <select
                    value={language}
                    onChange={(e) => setLanguage(e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-800 dark:text-white"
                  >
                    <option value="javascript">JavaScript</option>
                    <option value="typescript">TypeScript</option>
                    <option value="python">Python</option>
                    <option value="java">Java</option>
                    <option value="go">Go</option>
                    <option value="rust">Rust</option>
                    <option value="php">PHP</option>
                    <option value="ruby">Ruby</option>
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Code to Review
                  </label>
                  <textarea
                    value={code}
                    onChange={(e) => setCode(e.target.value)}
                    rows={15}
                    className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-800 dark:text-white font-mono text-sm"
                    placeholder="Paste your code here..."
                  />
                </div>

                <button
                  onClick={analyzeCode}
                  disabled={isLoading || !code.trim()}
                  className="w-full bg-blue-600 hover:bg-blue-700 disabled:bg-blue-400 text-white font-medium py-2 px-4 rounded-md transition-colors"
                >
                  {isLoading ? 'Analyzing...' : 'Review Code'}
                </button>
              </div>
            </div>

            {/* Error Display */}
            {error && (
              <div className="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-md p-4">
                <p className="text-red-800 dark:text-red-200">{error}</p>
              </div>
            )}
          </div>

          {/* Results Section */}
          <div className="space-y-6">
            {result && (
              <>
                {/* Summary Card */}
                <div className="bg-white dark:bg-gray-900 rounded-2xl border border-gray-200 dark:border-gray-700 p-6">
                  <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">
                    Review Summary
                  </h3>
                  <div className="flex items-center justify-between mb-4">
                    <span className="text-gray-600 dark:text-gray-400">Code Quality Score</span>
                    <span className={`text-2xl font-bold ${getScoreColor(result.score)}`}>
                      {result.score}/100
                    </span>
                  </div>
                  <p className="text-gray-700 dark:text-gray-300 text-sm whitespace-pre-wrap">
                    {result.summary}
                  </p>
                </div>

                {/* Issues List */}
                <div className="bg-white dark:bg-gray-900 rounded-2xl border border-gray-200 dark:border-gray-700 p-6">
                  <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">
                    Issues Found ({result.issues.length})
                  </h3>
                  <div className="space-y-3">
                    {result.issues.map((issue, index) => (
                      <div
                        key={index}
                        className="p-3 rounded-lg border border-gray-200 dark:border-gray-600"
                      >
                        <div className="flex items-start justify-between mb-2">
                          <span className={`px-2 py-1 rounded-full text-xs font-medium ${getSeverityColor(issue.severity)}`}>
                            {issue.severity.toUpperCase()}
                          </span>
                          {issue.line && (
                            <span className="text-xs text-gray-500 dark:text-gray-400">
                              Line {issue.line}
                            </span>
                          )}
                        </div>
                        <p className="text-sm text-gray-800 dark:text-gray-200 mb-2">
                          {issue.message}
                        </p>
                        {issue.suggestion && (
                          <p className="text-sm text-green-600 dark:text-green-400">
                            💡 Suggestion: {issue.suggestion}
                          </p>
                        )}
                      </div>
                    ))}
                  </div>
                </div>
              </>
            )}

            {/* Placeholder when no results */}
            {!result && !isLoading && (
              <div className="bg-gray-50 dark:bg-gray-900/50 rounded-2xl border border-gray-200 dark:border-gray-700 p-8 text-center">
                <div className="text-gray-400 dark:text-gray-500 mb-4">
                  <svg className="w-16 h-16 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1} d="M10 20l4-16m4 4l4 4-4 4M6 16l-4-4 4-4" />
                  </svg>
                </div>
                <h3 className="text-lg font-medium text-gray-700 dark:text-gray-300 mb-2">
                  Ready for Code Review
                </h3>
                <p className="text-gray-500 dark:text-gray-400 text-sm">
                  Paste your code and click &quot;Review Code&quot; to get AI-powered analysis
                </p>
              </div>
            )}
          </div>
        </div>

        {/* Info Section */}
        <div className="mt-12 text-center">
          <div className="inline-flex items-center px-4 py-2 rounded-full bg-gray-100 dark:bg-gray-800 border border-gray-200 dark:border-gray-700 mb-4">
            <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse mr-2" />
            <span className="text-sm font-medium text-gray-700 dark:text-gray-300">
              AI-powered code analysis
            </span>
          </div>
          <p className="text-gray-600 dark:text-gray-400 text-sm">
            Checks for security vulnerabilities, performance issues, code smells, and best practices
          </p>
        </div>
      </main>
    </div>
  );
}