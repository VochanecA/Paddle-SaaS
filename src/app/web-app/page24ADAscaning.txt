'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { createClient } from '@/lib/supabase/client';
import type { User } from '@supabase/supabase-js';

// Types for accessibility analysis
interface AccessibilityIssue {
  element: string;
  issue: string;
  severity: 'critical' | 'serious' | 'moderate' | 'minor';
  wcagLevel: 'A' | 'AA' | 'AAA';
  suggestion: string;
  code?: string;
}

interface AnalysisResult {
  url: string;
  score: number;
  issues: AccessibilityIssue[];
  summary: {
    critical: number;
    serious: number;
    moderate: number;
    minor: number;
  };
  timestamp: string;
}

interface AIResponse {
  content: string;
  usage?: {
    prompt_tokens?: number;
    completion_tokens?: number;
    total_tokens?: number;
  };
}

export default function WebAppPage() {
  const [user, setUser] = useState<User | null>(null);
  const [hasActiveSubscription, setHasActiveSubscription] = useState<boolean>(false);
  const [isLoading, setIsLoading] = useState<boolean>(true);
  const [url, setUrl] = useState<string>('');
  const [isAnalyzing, setIsAnalyzing] = useState<boolean>(false);
  const [result, setResult] = useState<AnalysisResult | null>(null);
  const [error, setError] = useState<string>('');
  const router = useRouter();

  useEffect(() => {
    window.scrollTo({ top: 0, behavior: 'auto' });
    const supabase = createClient();

    const fetchUserData = async () => {
      setIsLoading(true);
      const { data: { session }, error: sessionError } = await supabase.auth.getSession();

      if (sessionError || !session?.user) {
        router.push('/auth/login');
        return;
      }

      const { data: { user: fetchedUser }, error: userError } = await supabase.auth.getUser();

      if (userError || !fetchedUser?.email) {
        router.push('/auth/login');
        return;
      }

      const isSubscribed = await checkSubscriptionStatus(fetchedUser.email);

      if (!isSubscribed) {
        router.push('/account?message=subscription_required');
        return;
      }

      setUser(fetchedUser);
      setHasActiveSubscription(isSubscribed);
      setIsLoading(false);
    };

    fetchUserData().catch(() => router.push('/auth/login'));

    const { data: { subscription } } = supabase.auth.onAuthStateChange((event, newSession) => {
      if (event === 'SIGNED_OUT') {
        setUser(null);
        setHasActiveSubscription(false);
        router.push('/auth/login');
      } else if (event === 'SIGNED_IN' && newSession?.user) {
        setUser(newSession.user);
        checkSubscriptionStatus(newSession.user.email!).then((isSubscribed) => {
          if (!isSubscribed) {
            router.push('/account?message=subscription_required');
          } else {
            setHasActiveSubscription(true);
          }
        });
      }
    });

    return () => subscription.unsubscribe();
  }, [router]);

  async function checkSubscriptionStatus(userEmail: string): Promise<boolean> {
    const supabase = createClient();
    try {
      const { data: customer, error: customerError } = await supabase
        .from('customers')
        .select('customer_id')
        .eq('email', userEmail)
        .single();

      if (customerError || !customer) return false;

      const { data: subscriptions, error: subscriptionsError } = await supabase
        .from('subscriptions')
        .select('subscription_status')
        .eq('customer_id', customer.customer_id)
        .in('subscription_status', ['active', 'trialing']);

      if (subscriptionsError) return false;
      return !!(subscriptions && subscriptions.length > 0);
    } catch {
      return false;
    }
  }

  const extractJSONFromResponse = (response: string): AnalysisResult | null => {
    const cleanResponse = response.trim();
    
    // Try to find JSON in the response
    const jsonMatch = cleanResponse.match(/\{[\s\S]*\}/);
    if (jsonMatch) {
      try {
        return JSON.parse(jsonMatch[0]) as AnalysisResult;
      } catch {
        // Continue to fallback
      }
    }

    // Try parsing the entire response
    try {
      return JSON.parse(cleanResponse) as AnalysisResult;
    } catch {
      // Return null if all parsing attempts fail
      return null;
    }
  };

  const createFallbackResult = (url: string, aiResponse: string): AnalysisResult => {
    return {
      url,
      score: 65,
      issues: [
        {
          element: 'General',
          issue: 'AI analysis completed but structured data unavailable',
          severity: 'moderate' as const,
          wcagLevel: 'AA' as const,
          suggestion: aiResponse.substring(0, 200) + '...'
        }
      ],
      summary: { critical: 0, serious: 0, moderate: 1, minor: 0 },
      timestamp: new Date().toISOString()
    };
  };

  const analyzeWebsite = async () => {
    if (!url.trim()) {
      setError('Please enter a valid URL');
      return;
    }

    setIsAnalyzing(true);
    setError('');
    setResult(null);

    try {
      const normalizedUrl = url.startsWith('http') ? url : `https://${url}`;
      
      const systemPrompt = `You are an expert web accessibility auditor. Analyze the provided website URL for ADA/WCAG compliance issues. Return ONLY valid JSON in this exact format:

{
  "url": "${normalizedUrl}",
  "score": 85,
  "issues": [
    {
      "element": "img elements",
      "issue": "Missing alt attributes on images",
      "severity": "serious",
      "wcagLevel": "A",
      "suggestion": "Add descriptive alt text to all images. Use alt='' for decorative images.",
      "code": "<img src='image.jpg' alt='Descriptive text here'>"
    }
  ],
  "summary": {
    "critical": 0,
    "serious": 1,
    "moderate": 2,
    "minor": 1
  },
  "timestamp": "${new Date().toISOString()}"
}

Severity levels: critical, serious, moderate, minor
WCAG levels: A, AA, AAA
Focus on common issues: alt text, color contrast, keyboard navigation, form labels, heading structure, focus indicators.`;

      const messages = [
        { role: 'system' as const, content: systemPrompt },
        { 
          role: 'user' as const, 
          content: `Please analyze ${normalizedUrl} for ADA/WCAG compliance issues. Provide a comprehensive accessibility audit with specific remediation suggestions. Return only the JSON response.` 
        }
      ];

      const response = await fetch('/api/ai/chat', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          messages,
          temperature: 0.3,
          maxTokens: 2000
        })
      });

      if (!response.ok) {
        throw new Error(`API error: ${response.status}`);
      }

      const data: AIResponse = await response.json();
      
      let analysisResult = extractJSONFromResponse(data.content);
      
      if (!analysisResult || !analysisResult.issues || !Array.isArray(analysisResult.issues)) {
        analysisResult = createFallbackResult(normalizedUrl, data.content);
      }

      // Ensure required structure
      if (!analysisResult.summary) {
        const issues = analysisResult.issues || [];
        analysisResult.summary = {
          critical: issues.filter(i => i.severity === 'critical').length,
          serious: issues.filter(i => i.severity === 'serious').length,
          moderate: issues.filter(i => i.severity === 'moderate').length,
          minor: issues.filter(i => i.severity === 'minor').length
        };
      }

      setResult(analysisResult);
    } catch (err) {
      setError(`Analysis failed: ${err instanceof Error ? err.message : 'Unknown error'}`);
    } finally {
      setIsAnalyzing(false);
    }
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'text-red-600 bg-red-50 border-red-200';
      case 'serious': return 'text-orange-600 bg-orange-50 border-orange-200';
      case 'moderate': return 'text-yellow-600 bg-yellow-50 border-yellow-200';
      case 'minor': return 'text-blue-600 bg-blue-50 border-blue-200';
      default: return 'text-gray-600 bg-gray-50 border-gray-200';
    }
  };

  const downloadFile = (content: string, filename: string, contentType: string) => {
    const blob = new Blob([content], { type: contentType });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = filename;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  };

  const generateReportContent = (): string => {
    if (!result) return '';
    const date = new Date(result.timestamp);
    const scoreClass = result.score >= 80 ? 'good' : result.score >= 60 ? 'warning' : 'danger';
    
    return `
      <div class="header">
        <h1>Moj APP</h1>
        <h2><strong>Web Accessibility Auditor</strong></h2>
      </div>
      
      <div class="meta">
        <strong>Target Scan:</strong> ${result.url}<br>
        <strong>Date:</strong> ${date.toLocaleDateString()}<br>
        <strong>Time:</strong> ${date.toLocaleTimeString()}
      </div>
      
      <div class="score-section">
        <div class="score ${scoreClass}">${result.score}/100</div>
        <h3>Accessibility Score</h3>
      </div>
      
      <div class="summary">
        <div class="summary-item">
          <h4>Critical</h4>
          <div style="font-size: 1.5em; color: #ef4444;">${result.summary.critical}</div>
        </div>
        <div class="summary-item">
          <h4>Serious</h4>
          <div style="font-size: 1.5em; color: #f97316;">${result.summary.serious}</div>
        </div>
        <div class="summary-item">
          <h4>Moderate</h4>
          <div style="font-size: 1.5em; color: #eab308;">${result.summary.moderate}</div>
        </div>
        <div class="summary-item">
          <h4>Minor</h4>
          <div style="font-size: 1.5em; color: #3b82f6;">${result.summary.minor}</div>
        </div>
      </div>
      
      <h2>Detailed Issues</h2>
      ${result.issues.map((issue, index) => `
        <div class="issue">
          <h3>${index + 1}. ${issue.element}</h3>
          <p><strong>Issue:</strong> ${issue.issue}</p>
          <p>
            <span class="severity ${issue.severity}">${issue.severity.toUpperCase()}</span>
            <span style="margin-left: 10px; padding: 3px 8px; background: #f3f4f6; border-radius: 3px;">WCAG ${issue.wcagLevel}</span>
          </p>
          
          <div class="suggestion">
            <strong>💡 Remediation Suggestion:</strong><br>
            ${issue.suggestion}
          </div>
          
          ${issue.code ? `<strong>Code Example:</strong><br><code>${issue.code}</code>` : ''}
        </div>
      `).join('')}
      
      <div style="margin-top: 40px; text-align: center; color: #666; font-size: 0.9em;">
        Generated by Moj APP - Web Accessibility Auditor
      </div>
    `;
  };

  const exportToPDF = () => {
    if (!result) return;
    const reportContent = generateReportContent();
    const printWindow = window.open('', '_blank');
    if (printWindow) {
      printWindow.document.write(`
        <html>
          <head>
            <title>Moj APP - Web Accessibility Report</title>
            <style>
              body { font-family: Arial, sans-serif; margin: 20px; line-height: 1.6; }
              .header { text-align: center; border-bottom: 2px solid #333; padding-bottom: 20px; margin-bottom: 30px; }
              .header h1 { font-size: 2.5em; margin: 0; color: #333; }
              .header h2 { font-size: 1.5em; margin: 10px 0; color: #666; }
              .meta { background: #f5f5f5; padding: 15px; border-radius: 5px; margin-bottom: 30px; }
              .score-section { text-align: center; margin: 30px 0; }
              .score { font-size: 3em; font-weight: bold; margin: 10px; }
              .score.good { color: #22c55e; }
              .score.warning { color: #eab308; }
              .score.danger { color: #ef4444; }
              .summary { display: flex; justify-content: space-around; margin: 20px 0; }
              .summary-item { text-align: center; padding: 10px; }
              .issue { border: 1px solid #ddd; margin: 15px 0; padding: 15px; border-radius: 5px; }
              .issue h3 { color: #333; margin-top: 0; }
              .severity { padding: 3px 8px; border-radius: 3px; font-size: 0.8em; font-weight: bold; }
              .critical { background: #fecaca; color: #991b1b; }
              .serious { background: #fed7aa; color: #9a3412; }
              .moderate { background: #fef3c7; color: #92400e; }
              .minor { background: #dbeafe; color: #1e40af; }
              .suggestion { background: #f0f9ff; padding: 10px; border-left: 4px solid #3b82f6; margin: 10px 0; }
              code { background: #1f2937; color: #10b981; padding: 10px; display: block; border-radius: 3px; font-size: 0.9em; }
            </style>
          </head>
          <body>${reportContent}</body>
        </html>
      `);
      printWindow.document.close();
      printWindow.focus();
      setTimeout(() => {
        printWindow.print();
        printWindow.close();
      }, 250);
    }
  };

  const exportToMarkdown = () => {
    if (!result) return;
    const date = new Date(result.timestamp);
    const content = `# Moj APP
## **Web Accessibility Auditor**

**Target Scan:** ${result.url}  
**Date:** ${date.toLocaleDateString()}  
**Time:** ${date.toLocaleTimeString()}

---

## Accessibility Score: ${result.score}/100

### Summary
- **Critical Issues:** ${result.summary.critical}
- **Serious Issues:** ${result.summary.serious}
- **Moderate Issues:** ${result.summary.moderate}
- **Minor Issues:** ${result.summary.minor}

---

## Detailed Issues

${result.issues.map((issue, index) => `
### ${index + 1}. ${issue.element}

**Issue:** ${issue.issue}  
**Severity:** ${issue.severity.toUpperCase()}  
**WCAG Level:** ${issue.wcagLevel}

**Remediation Suggestion:**  
${issue.suggestion}

${issue.code ? `**Code Example:**\n\`\`\`html\n${issue.code}\n\`\`\`` : ''}

---
`).join('')}

Generated by Moj APP - Web Accessibility Auditor
`;

    downloadFile(content, `accessibility-report-${new Date().toISOString().split('T')[0]}.md`, 'text/markdown');
  };

  const exportToCSV = () => {
    if (!result) return;
    const date = new Date(result.timestamp);
    let csvContent = 'Moj APP - Web Accessibility Auditor Report\n';
    csvContent += `Target URL,${result.url}\n`;
    csvContent += `Scan Date,${date.toLocaleDateString()}\n`;
    csvContent += `Scan Time,${date.toLocaleTimeString()}\n`;
    csvContent += `Overall Score,${result.score}/100\n\n`;
    
    csvContent += 'Summary\n';
    csvContent += `Critical Issues,${result.summary.critical}\n`;
    csvContent += `Serious Issues,${result.summary.serious}\n`;
    csvContent += `Moderate Issues,${result.summary.moderate}\n`;
    csvContent += `Minor Issues,${result.summary.minor}\n\n`;
    
    csvContent += 'Element,Issue,Severity,WCAG Level,Suggestion,Code Example\n';
    result.issues.forEach(issue => {
      const cleanSuggestion = issue.suggestion.replace(/"/g, '""').replace(/\n/g, ' ');
      const cleanCode = issue.code ? issue.code.replace(/"/g, '""').replace(/\n/g, ' ') : '';
      csvContent += `"${issue.element}","${issue.issue}","${issue.severity}","${issue.wcagLevel}","${cleanSuggestion}","${cleanCode}"\n`;
    });

    downloadFile(csvContent, `accessibility-report-${new Date().toISOString().split('T')[0]}.csv`, 'text/csv');
  };

  if (isLoading || !user) {
    return (
      <div className="min-h-screen bg-white dark:bg-gray-950 flex items-center justify-center">
        <div className="text-xl text-gray-800 dark:text-gray-200">Loading...</div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50 dark:from-gray-900 dark:via-gray-950 dark:to-gray-900">
      <main className="relative">
        {/* Header */}
        <section className="pt-8 pb-6 px-4 sm:px-6 lg:px-8">
          <div className="max-w-6xl mx-auto">
            <div className="text-center mb-8">
              <div className="inline-flex items-center px-4 py-2 rounded-full bg-green-100 dark:bg-green-900/50 border border-green-200 dark:border-green-800/50 mb-6">
                <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse mr-2" />
                <span className="text-sm font-medium text-green-800 dark:text-green-200">
                  ADA/WCAG Compliance Scanner
                </span>
              </div>

              <h1 className="text-4xl sm:text-5xl font-bold tracking-tight text-gray-900 dark:text-white mb-4">
                Moj APP
              </h1>
              <h2 className="text-2xl sm:text-3xl font-semibold text-gray-700 dark:text-gray-300 mb-4">
                <strong>Web Accessibility Auditor</strong>
              </h2>

              <p className="text-lg text-gray-700 dark:text-gray-300 max-w-2xl mx-auto">
                Scan your website for accessibility issues and get AI-powered remediation suggestions to ensure ADA and WCAG compliance.
              </p>
            </div>
          </div>
        </section>

        {/* Scanner Interface */}
        <section className="pb-8 px-4 sm:px-6 lg:px-8">
          <div className="max-w-6xl mx-auto">
            <div className="bg-white dark:bg-gray-900 rounded-2xl border border-gray-200 dark:border-gray-700 shadow-lg p-6 mb-8">
              <div className="flex flex-col sm:flex-row gap-4">
                <input
                  type="url"
                  value={url}
                  onChange={(e) => setUrl(e.target.value)}
                  placeholder="Enter website URL (e.g., https://example.com)"
                  className="flex-1 px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  disabled={isAnalyzing}
                />
                <button
                  onClick={analyzeWebsite}
                  disabled={isAnalyzing || !url.trim()}
                  className="px-8 py-3 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white rounded-lg font-medium transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed min-w-[140px]"
                >
                  {isAnalyzing ? (
                    <div className="flex items-center justify-center">
                      <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2" />
                      Scanning...
                    </div>
                  ) : (
                    'Scan Website'
                  )}
                </button>
              </div>

              {error && (
                <div className="mt-4 p-4 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg">
                  <p className="text-red-800 dark:text-red-200">{error}</p>
                </div>
              )}
            </div>

            {/* Export Functions */}
            {result && (
              <div className="bg-white dark:bg-gray-900 rounded-2xl border border-gray-200 dark:border-gray-700 shadow-lg p-6 mb-6">
                <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
                  <div>
                    <h2 className="text-xl font-bold text-gray-900 dark:text-white">Accessibility Report</h2>
                    <p className="text-sm text-gray-600 dark:text-gray-400">
                      Target: {result.url} | Scanned: {new Date(result.timestamp).toLocaleDateString()} at {new Date(result.timestamp).toLocaleTimeString()}
                    </p>
                  </div>
                  <div className="flex gap-3">
                    <button
                      onClick={exportToPDF}
                      className="px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded-lg font-medium text-sm transition-all duration-200 flex items-center gap-2"
                    >
                      📄 PDF
                    </button>
                    <button
                      onClick={exportToMarkdown}
                      className="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg font-medium text-sm transition-all duration-200 flex items-center gap-2"
                    >
                      📝 Markdown
                    </button>
                    <button
                      onClick={exportToCSV}
                      className="px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg font-medium text-sm transition-all duration-200 flex items-center gap-2"
                    >
                      📊 CSV
                    </button>
                  </div>
                </div>
              </div>
            )}

            {/* Results */}
            {result && (
              <div className="space-y-6">
                {/* Score Overview */}
                <div className="bg-white dark:bg-gray-900 rounded-2xl border border-gray-200 dark:border-gray-700 shadow-lg p-6">
                  <div className="flex items-center justify-between mb-6">
                    <h2 className="text-2xl font-bold text-gray-900 dark:text-white">Accessibility Score</h2>
                    <div className="flex items-center">
                      <div className={`text-3xl font-bold ${result.score >= 80 ? 'text-green-600' : result.score >= 60 ? 'text-yellow-600' : 'text-red-600'}`}>
                        {result.score}
                      </div>
                      <span className="text-gray-500 ml-1">/100</span>
                    </div>
                  </div>

                  <div className="grid grid-cols-2 sm:grid-cols-4 gap-4">
                    <div className="text-center p-4 bg-red-50 dark:bg-red-900/20 rounded-lg border border-red-200 dark:border-red-800">
                      <div className="text-2xl font-bold text-red-600 dark:text-red-400">{result.summary.critical}</div>
                      <div className="text-sm text-red-700 dark:text-red-300">Critical</div>
                    </div>
                    <div className="text-center p-4 bg-orange-50 dark:bg-orange-900/20 rounded-lg border border-orange-200 dark:border-orange-800">
                      <div className="text-2xl font-bold text-orange-600 dark:text-orange-400">{result.summary.serious}</div>
                      <div className="text-sm text-orange-700 dark:text-orange-300">Serious</div>
                    </div>
                    <div className="text-center p-4 bg-yellow-50 dark:bg-yellow-900/20 rounded-lg border border-yellow-200 dark:border-yellow-800">
                      <div className="text-2xl font-bold text-yellow-600 dark:text-yellow-400">{result.summary.moderate}</div>
                      <div className="text-sm text-yellow-700 dark:text-yellow-300">Moderate</div>
                    </div>
                    <div className="text-center p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg border border-blue-200 dark:border-blue-800">
                      <div className="text-2xl font-bold text-blue-600 dark:text-blue-400">{result.summary.minor}</div>
                      <div className="text-sm text-blue-700 dark:text-blue-300">Minor</div>
                    </div>
                  </div>
                </div>

                {/* Issues List */}
                <div className="bg-white dark:bg-gray-900 rounded-2xl border border-gray-200 dark:border-gray-700 shadow-lg p-6">
                  <h2 className="text-2xl font-bold text-gray-900 dark:text-white mb-6">Issues Found</h2>
                  
                  <div className="space-y-4">
                    {result.issues.map((issue, index) => (
                      <div key={index} className="border border-gray-200 dark:border-gray-700 rounded-lg p-4">
                        <div className="flex items-start justify-between mb-3">
                          <div>
                            <h3 className="text-lg font-semibold text-gray-900 dark:text-white">{issue.element}</h3>
                            <p className="text-gray-700 dark:text-gray-300 mt-1">{issue.issue}</p>
                          </div>
                          <div className="flex items-center gap-2">
                            <span className={`px-2 py-1 text-xs font-medium rounded border ${getSeverityColor(issue.severity)} dark:bg-opacity-20`}>
                              {issue.severity.toUpperCase()}
                            </span>
                            <span className="px-2 py-1 text-xs font-medium rounded bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 border border-gray-200 dark:border-gray-600">
                              WCAG {issue.wcagLevel}
                            </span>
                          </div>
                        </div>
                        
                        <div className="bg-blue-50 dark:bg-blue-900/20 rounded-lg p-4 border border-blue-200 dark:border-blue-800">
                          <h4 className="font-medium text-blue-900 dark:text-blue-100 mb-2">💡 Remediation Suggestion:</h4>
                          <p className="text-blue-800 dark:text-blue-200 text-sm">{issue.suggestion}</p>
                          
                          {issue.code && (
                            <div className="mt-3">
                              <h5 className="font-medium text-blue-900 dark:text-blue-100 mb-1">Code Example:</h5>
                              <code className="block bg-gray-900 dark:bg-gray-800 text-green-400 p-2 rounded text-xs overflow-x-auto">
                                {issue.code}
                              </code>
                            </div>
                          )}
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            )}
          </div>
        </section>
      </main>
    </div>
  );
}