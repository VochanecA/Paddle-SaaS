'use client';

import { useState, useRef, useEffect, useCallback } from 'react';
import { useRouter } from 'next/navigation';
import { createClient } from '@/lib/supabase/client';
import { useTheme } from 'next-themes';
import { Loader2, FileText, Sparkles, Download, Share2, Copy, Check } from 'lucide-react';
import ReactMarkdown from 'react-markdown';

interface DocumentAnalysis {
  summary: string;
  keyPoints: string[];
  sentiment: 'positive' | 'neutral' | 'negative';
  topics: string[];
}

interface ContentGeneration {
  title: string;
  content: string;
  wordCount: number;
}

interface SubscriptionStatus {
  hasActiveSubscription: boolean;
  isLoading: boolean;
}

interface ApiResponse {
  content: string;
}

interface ChatMessage {
  role: 'system' | 'user' | 'assistant';
  content: string;
}

const WebApp: React.FC = () => {
  const [documentContent, setDocumentContent] = useState<string>('');
  const [analysis, setAnalysis] = useState<DocumentAnalysis | null>(null);
  const [generatedContent, setGeneratedContent] = useState<ContentGeneration | null>(null);
  const [prompt, setPrompt] = useState<string>('');
  const [isAnalyzing, setIsAnalyzing] = useState<boolean>(false);
  const [isGenerating, setIsGenerating] = useState<boolean>(false);
  const [subscriptionStatus, setSubscriptionStatus] = useState<SubscriptionStatus>({
    hasActiveSubscription: false,
    isLoading: true,
  });
  const [copied, setCopied] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);
  const [activeTab, setActiveTab] = useState<'analyze' | 'generate'>('analyze');
  
  const fileInputRef = useRef<HTMLInputElement>(null);
  const { theme } = useTheme();
  const router = useRouter();
  const supabase = createClient();

  // Check subscription status
  useEffect(() => {
    const checkSubscription = async (): Promise<void> => {
      try {
        const { data: { user } } = await supabase.auth.getUser();
        
        if (!user) {
          setSubscriptionStatus({
            hasActiveSubscription: false,
            isLoading: false,
          });
          return;
        }

        const { data: customer } = await supabase
          .from('customers')
          .select('customer_id')
          .eq('email', user.email)
          .single();

        if (!customer) {
          setSubscriptionStatus({
            hasActiveSubscription: false,
            isLoading: false,
          });
          return;
        }

        const { data: subscriptions } = await supabase
          .from('subscriptions')
          .select('*')
          .eq('customer_id', customer.customer_id);

        const hasActiveSubscription = subscriptions?.some(
          sub => sub.subscription_status === 'active' || sub.subscription_status === 'trialing'
        ) || false;

        setSubscriptionStatus({
          hasActiveSubscription,
          isLoading: false,
        });
      } catch (err) {
        console.error('Error checking subscription:', err);
        setSubscriptionStatus({
          hasActiveSubscription: false,
          isLoading: false,
        });
      }
    };

    void checkSubscription();
  }, [supabase]);

  const handleFileUpload = useCallback((e: React.ChangeEvent<HTMLInputElement>): void => {
    const file = e.target.files?.[0];
    if (!file) return;

    if (file.type !== 'text/plain') {
      setError('Please upload a text file (.txt)');
      return;
    }

    if (file.size > 1024 * 1024) { // 1MB limit
      setError('File size must be less than 1MB');
      return;
    }

    const reader = new FileReader();
    reader.onload = (event: ProgressEvent<FileReader>): void => {
      const content = event.target?.result as string;
      setDocumentContent(content);
      setError(null);
    };
    reader.readAsText(file);
  }, []);

  const analyzeDocument = useCallback(async (): Promise<void> => {
    if (!documentContent.trim()) {
      setError('Please enter or upload a document to analyze');
      return;
    }

    setIsAnalyzing(true);
    setError(null);

    try {
      const messages: ChatMessage[] = [
        {
          role: 'system',
          content: 'You are an expert document analyst. Analyze the provided document and return ONLY a valid JSON object (no markdown formatting, no code blocks, no additional text) with the following structure: { "summary": "A concise summary of the document", "keyPoints": ["Key point 1", "Key point 2", ...], "sentiment": "positive|neutral|negative", "topics": ["Topic 1", "Topic 2", ...] }',
        },
        {
          role: 'user',
          content: `Please analyze this document: ${documentContent}`,
        },
      ];

      const response = await fetch('/api/ai/chat', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        credentials: 'include',
        body: JSON.stringify({ messages }),
      });

      if (!response.ok) {
        throw new Error(`API returned ${response.status}`);
      }

      const data: ApiResponse = await response.json();
      
      try {
        const analysisResult: DocumentAnalysis = JSON.parse(data.content);
        setAnalysis(analysisResult);
      } catch (parseError) {
        // If the response isn't valid JSON, treat it as a regular summary
        setAnalysis({
          summary: data.content,
          keyPoints: [],
          sentiment: 'neutral',
          topics: [],
        });
      }
    } catch (err) {
      console.error('Error analyzing document:', err);
      setError(err instanceof Error ? err.message : 'Failed to analyze document');
    } finally {
      setIsAnalyzing(false);
    }
  }, [documentContent]);

  const generateContent = useCallback(async (): Promise<void> => {
    if (!prompt.trim()) {
      setError('Please enter a prompt to generate content');
      return;
    }

    setIsGenerating(true);
    setError(null);

    try {
      const messages: ChatMessage[] = [
        {
          role: 'system',
          content: 'You are an expert content creator. Generate high-quality, well-structured content based on the user\'s prompt. The content should be engaging, informative, and ready to publish.',
        },
        {
          role: 'user',
          content: prompt,
        },
      ];

      const response = await fetch('/api/ai/chat', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        credentials: 'include',
        body: JSON.stringify({ messages }),
      });

      if (!response.ok) {
        throw new Error(`API returned ${response.status}`);
      }

      const data: ApiResponse = await response.json();
      const wordCount = data.content.split(/\s+/).length;
      
      setGeneratedContent({
        title: prompt.length > 50 ? `${prompt.substring(0, 50)}...` : prompt,
        content: data.content,
        wordCount,
      });
    } catch (err) {
      console.error('Error generating content:', err);
      setError(err instanceof Error ? err.message : 'Failed to generate content');
    } finally {
      setIsGenerating(false);
    }
  }, [prompt]);

  const copyToClipboard = useCallback(async (text: string): Promise<void> => {
    try {
      await navigator.clipboard.writeText(text);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (err) {
      console.error('Failed to copy text:', err);
      setError('Failed to copy to clipboard');
    }
  }, []);

  const downloadContent = useCallback((): void => {
    if (!generatedContent) return;
    
    // Create a Blob with the content
    const blob = new Blob([generatedContent.content], { type: 'text/plain' });
    
    // Create a URL for the blob
    const url = URL.createObjectURL(blob);
    
    // Create a temporary link element using the global document object
    const link = globalThis.document.createElement('a');
    link.href = url;
    link.download = `${generatedContent.title.replace(/\s+/g, '_')}.txt`;
    
    // Programmatically click the link to trigger the download
    globalThis.document.body.appendChild(link);
    link.click();
    
    // Clean up
    setTimeout(() => {
      globalThis.document.body.removeChild(link);
      URL.revokeObjectURL(url);
    }, 100);
  }, [generatedContent]);

  const handleTabChange = useCallback((tab: 'analyze' | 'generate'): void => {
    setActiveTab(tab);
    setError(null); // Clear errors when switching tabs
  }, []);

  const handleDocumentChange = useCallback((e: React.ChangeEvent<HTMLTextAreaElement>): void => {
    setDocumentContent(e.target.value);
    setError(null);
  }, []);

  const handlePromptChange = useCallback((e: React.ChangeEvent<HTMLTextAreaElement>): void => {
    setPrompt(e.target.value);
    setError(null);
  }, []);

  if (subscriptionStatus.isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <Loader2 className="h-8 w-8 animate-spin" />
      </div>
    );
  }

  if (!subscriptionStatus.hasActiveSubscription) {
    return (
      <div className="min-h-screen flex items-center justify-center p-4">
        <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md border border-gray-200 dark:border-gray-700 max-w-md w-full">
          <div className="p-6">
            <h3 className="text-lg font-semibold text-center mb-2">Subscription Required</h3>
            <p className="text-sm text-gray-600 dark:text-gray-400 text-center mb-4">
              You need an active subscription to access the AI-powered features.
            </p>
            <div className="flex justify-center">
              <button
                type="button"
                onClick={() => router.push('/pricing')}
                className="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-md transition-colors"
              >
                View Pricing Plans
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-background">
      <div className="container mx-auto py-8 px-4 max-w-6xl">
        <div className="mb-10 text-center">
          <h1 className="text-4xl font-bold tracking-tight mb-4">
            AI Content Studio
          </h1>
          <p className="text-xl text-muted-foreground max-w-2xl mx-auto">
            Harness the power of AI to analyze documents and generate high-quality content in seconds.
          </p>
        </div>
        
        {error && (
          <div className="mb-6 p-4 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-md">
            <p className="text-sm text-red-800 dark:text-red-300">{error}</p>
          </div>
        )}
        
        <div className="w-full">
          <div className="flex border-b border-gray-200 dark:border-gray-700 mb-6">
            <button
              type="button"
              className={`px-4 py-2 font-medium text-sm ${
                activeTab === 'analyze'
                  ? 'border-b-2 border-blue-500 text-blue-600 dark:text-blue-400'
                  : 'text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300'
              }`}
              onClick={() => handleTabChange('analyze')}
            >
              <div className="flex items-center gap-2">
                <FileText className="h-4 w-4" />
                Document Analysis
              </div>
            </button>
            <button
              type="button"
              className={`px-4 py-2 font-medium text-sm ${
                activeTab === 'generate'
                  ? 'border-b-2 border-blue-500 text-blue-600 dark:text-blue-400'
                  : 'text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300'
              }`}
              onClick={() => handleTabChange('generate')}
            >
              <div className="flex items-center gap-2">
                <Sparkles className="h-4 w-4" />
                Content Generation
              </div>
            </button>
          </div>
          
          {activeTab === 'analyze' && (
            <div className="space-y-6">
              <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md border border-gray-200 dark:border-gray-700">
                <div className="p-6">
                  <h3 className="text-lg font-semibold mb-2">Analyze Document</h3>
                  <p className="text-sm text-gray-600 dark:text-gray-400 mb-4">
                    Upload a text document or paste content to analyze key points, sentiment, and topics.
                  </p>
                  
                  <div className="space-y-4">
                    <div>
                      <input
                        type="file"
                        ref={fileInputRef}
                        onChange={handleFileUpload}
                        accept=".txt"
                        className="hidden"
                      />
                      <button
                        type="button"
                        onClick={() => fileInputRef.current?.click()}
                        className="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 rounded-md hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors"
                      >
                        Upload Text Document
                      </button>
                    </div>
                    
                    <div>
                      <label htmlFor="document" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                        Or paste document content:
                      </label>
                      <textarea
                        id="document"
                        placeholder="Paste your document content here..."
                        value={documentContent}
                        onChange={handleDocumentChange}
                        className="w-full min-h-[200px] px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-900 text-gray-900 dark:text-gray-100 focus:outline-none focus:ring-2 focus:ring-blue-500"
                      />
                    </div>
                    
                    <button
                      type="button"
                      onClick={() => void analyzeDocument()}
                      disabled={isAnalyzing || !documentContent.trim()}
                      className="w-full px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-md disabled:bg-blue-400 disabled:cursor-not-allowed transition-colors"
                    >
                      {isAnalyzing ? (
                        <>
                          <Loader2 className="mr-2 h-4 w-4 animate-spin inline" />
                          Analyzing...
                        </>
                      ) : (
                        'Analyze Document'
                      )}
                    </button>
                  </div>
                </div>
              </div>
              
              {analysis && (
                <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md border border-gray-200 dark:border-gray-700">
                  <div className="p-6">
                    <h3 className="text-lg font-semibold mb-4">Analysis Results</h3>
                    
                    <div className="space-y-6">
                      <div>
                        <h4 className="text-md font-medium mb-2">Summary</h4>
                        <p className="text-gray-600 dark:text-gray-400">{analysis.summary}</p>
                      </div>
                      
                      {analysis.keyPoints.length > 0 && (
                        <div>
                          <h4 className="text-md font-medium mb-2">Key Points</h4>
                          <ul className="space-y-1">
                            {analysis.keyPoints.map((point, index) => (
                              <li key={index} className="flex items-start">
                                <span className="mr-2">•</span>
                                <span>{point}</span>
                              </li>
                            ))}
                          </ul>
                        </div>
                      )}
                      
                      <div className="flex flex-wrap gap-4">
                        <div>
                          <h4 className="text-md font-medium mb-2">Sentiment</h4>
                          <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                            analysis.sentiment === 'positive' 
                              ? 'bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-300' 
                              : analysis.sentiment === 'negative' 
                                ? 'bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-300' 
                                : 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300'
                          }`}>
                            {analysis.sentiment}
                          </span>
                        </div>
                        
                        {analysis.topics.length > 0 && (
                          <div>
                            <h4 className="text-md font-medium mb-2">Topics</h4>
                            <div className="flex flex-wrap gap-1">
                              {analysis.topics.map((topic, index) => (
                                <span key={index} className="inline-flex items-center px-2 py-1 rounded text-xs border border-gray-200 dark:border-gray-700">
                                  {topic}
                                </span>
                              ))}
                            </div>
                          </div>
                        )}
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          type="button"
                          className="px-3 py-1.5 text-sm border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 rounded-md hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors flex items-center gap-2"
                          onClick={() => void copyToClipboard(analysis.summary)}
                        >
                          {copied ? <Check className="h-4 w-4" /> : <Copy className="h-4 w-4" />}
                          {copied ? 'Copied!' : 'Copy Summary'}
                        </button>
                      </div>
                    </div>
                  </div>
                </div>
              )}
            </div>
          )}
          
          {activeTab === 'generate' && (
            <div className="space-y-6">
              <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md border border-gray-200 dark:border-gray-700">
                <div className="p-6">
                  <h3 className="text-lg font-semibold mb-2">Generate Content</h3>
                  <p className="text-sm text-gray-600 dark:text-gray-400 mb-4">
                    Describe what content you want to generate, and our AI will create it for you.
                  </p>
                  
                  <div className="space-y-4">
                    <div>
                      <label htmlFor="prompt" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                        Content Prompt
                      </label>
                      <textarea
                        id="prompt"
                        placeholder="e.g., Write a blog post about the benefits of remote work..."
                        value={prompt}
                        onChange={handlePromptChange}
                        className="w-full min-h-[120px] px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-900 text-gray-900 dark:text-gray-100 focus:outline-none focus:ring-2 focus:ring-blue-500"
                      />
                    </div>
                    
                    <button
                      type="button"
                      onClick={() => void generateContent()}
                      disabled={isGenerating || !prompt.trim()}
                      className="w-full px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-md disabled:bg-blue-400 disabled:cursor-not-allowed transition-colors"
                    >
                      {isGenerating ? (
                        <>
                          <Loader2 className="mr-2 h-4 w-4 animate-spin inline" />
                          Generating...
                        </>
                      ) : (
                        'Generate Content'
                      )}
                    </button>
                  </div>
                </div>
              </div>
              
              {generatedContent && (
                <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md border border-gray-200 dark:border-gray-700">
                  <div className="p-6">
                    <div className="flex justify-between items-start mb-4">
                      <div>
                        <h3 className="text-lg font-semibold">{generatedContent.title}</h3>
                        <p className="text-sm text-gray-600 dark:text-gray-400">
                          {generatedContent.wordCount} words
                        </p>
                      </div>
                      <div className="flex gap-2">
                        <button
                          type="button"
                          className="p-2 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300"
                          onClick={() => void copyToClipboard(generatedContent.content)}
                          title="Copy content"
                        >
                          {copied ? <Check className="h-4 w-4" /> : <Copy className="h-4 w-4" />}
                        </button>
                        <button
                          type="button"
                          className="p-2 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300"
                          onClick={downloadContent}
                          title="Download content"
                        >
                          <Download className="h-4 w-4" />
                        </button>
                        <button
                          type="button"
                          className="p-2 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300"
                          title="Share content"
                        >
                          <Share2 className="h-4 w-4" />
                        </button>
                      </div>
                    </div>
                    
                    <div className="prose prose-sm max-w-none dark:prose-invert">
                      <ReactMarkdown>{generatedContent.content}</ReactMarkdown>
                    </div>
                  </div>
                </div>
              )}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default WebApp;